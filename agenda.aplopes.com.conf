# /etc/nginx/sites-available/agenda.aplopes.com.conf

#####################################
# 1) Redirecionamento HTTP → HTTPS  #
#####################################
server {
    listen 80;
    listen [::]:80;
    server_name agenda.aplopes.com www.agenda.aplopes.com;

    # Redirecionamento permanente para HTTPS
    return 301 https://$server_name$request_uri;
}

#####################################
# 2) Servidor HTTPS                  #
#####################################
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name agenda.aplopes.com www.agenda.aplopes.com;

    ## Certificados Let's Encrypt
    ssl_certificate     /etc/letsencrypt/live/agenda.aplopes.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/agenda.aplopes.com/privkey.pem;

    ## Protocolos e ciphers modernos
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers         ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384 \
                        ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache   shared:SSL:10m;
    ssl_session_timeout 10m;

    ## HSTS e outras headers de segurança
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options         DENY always;
    add_header X-Content-Type-Options  nosniff always;
    add_header X-XSS-Protection        "1; mode=block" always;
    add_header Referrer-Policy         "strict-origin-when-cross-origin" always;

    ## Logs
    access_log /var/log/nginx/agenda.aplopes.com.access.log;
    error_log  /var/log/nginx/agenda.aplopes.com.error.log;

    #################################
    # A) Proxy geral para Spring    #
    #################################
    location / {
        proxy_pass http://localhost:8080;
        proxy_set_header Host               $host;
        proxy_set_header X-Real-IP          $remote_addr;
        proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto  $scheme;
        proxy_set_header X-Forwarded-Host   $host;
        proxy_set_header X-Forwarded-Port   $server_port;

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout    60s;
        proxy_read_timeout    60s;

        # Buffering
        proxy_buffering      on;
        proxy_buffer_size    4k;
        proxy_buffers        8 4k;
        proxy_busy_buffers_size 8k;

        # WebSockets (se precisar)
        proxy_http_version   1.1;
        proxy_set_header Upgrade   $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    #################################
    # B) Health check do Spring     #
    #################################
    location /actuator/health {
        proxy_pass http://localhost:8080/actuator/health;
        proxy_set_header Host               $host;
        proxy_set_header X-Real-IP          $remote_addr;
        proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto  $scheme;

        # Não cachear health checks
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma        "no-cache";
        add_header Expires       "0";
    }

    #################################
    # C) Bloquear console H2         #
    #################################
    location /h2-console {
        deny all;
        return 403;
    }

    #################################
    # D) Arquivos estáticos futuros  #
    #################################
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://localhost:8080;
        proxy_set_header Host $host;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary Accept-Encoding;
    }

    #################################
    # E) Favicon                     #
    #################################
    location = /favicon.ico {
        proxy_pass http://localhost:8080/favicon.ico;
        log_not_found off;
        access_log    off;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    #################################
    # F) robots.txt                  #
    #################################
    location = /robots.txt {
        proxy_pass http://localhost:8080/robots.txt;
        log_not_found off;
        access_log    off;
    }

    #################################
    # G) API com CORS controlado     #
    #################################
    # (rate limit presumindo que você já definiu zone=api em http{}):
    location /api/ {
        proxy_pass http://localhost:8080;
        proxy_set_header Host               $host;
        proxy_set_header X-Real-IP          $remote_addr;
        proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto  $scheme;
        proxy_set_header X-Forwarded-Host   $host;
        proxy_set_header X-Forwarded-Port   $server_port;

        # Limite de 100 req/min por IP (burst 20)
        limit_req zone=api burst=20 nodelay;

        # Remover qualquer header CORS que venha do Spring
        proxy_hide_header Access-Control-Allow-Origin;
        proxy_hide_header Access-Control-Allow-Methods;
        proxy_hide_header Access-Control-Allow-Headers;
        proxy_hide_header Access-Control-Allow-Credentials;

        # Responder direto o preflight (OPTIONS)
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin   $http_origin always;
            add_header Access-Control-Allow-Credentials 'true' always;
            add_header Access-Control-Allow-Methods  'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header Access-Control-Allow-Headers  $http_access_control_request_headers always;
            return 204;
        }

        # Para todas as outras requisições da API
        add_header Access-Control-Allow-Origin   $http_origin always;
        add_header Access-Control-Allow-Credentials 'true' always;
        add_header Access-Control-Allow-Methods  'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header Access-Control-Allow-Headers  $http_access_control_request_headers always;

        # (Aqui você mantém timeouts, buffers e websockets, se quiser)
    }

    #################################
    # H) Monitoramento Nginx-status  #
    #################################
    location = /nginx-status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow ::1;
        deny all;
    }
}
